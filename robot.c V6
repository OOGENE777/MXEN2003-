// Microcontroller project to do:
/********************************************
1) Connect H-Bridge, Xbee, Power Supply and Motors
2) ensure you have bi-diractional, variable speed on both motors
3) Use comunication proticol from Lab 7 to communicate from the controller to the robot to control movement in all directions
4) Test manual control of robot to ensure controll without delays or interuptions (debug communication protocol)
5) Wire servo and range sensors (consider range sensor placement and wether to use position or velocity servo)
6) may need power regulators to supply additional 5V current (eg to servos/sensors)
7) add servo control byte to controller --> robot message
8) use servo control byte to set servo position in response to joystick
9) measure range sensor responses and obtain a calibration function for each sensor
10) use robot --> controller communication to send sensor values to controller and display calibrated readings on LCD
11) add autonimy switch signal to controller --> robot message
12) ensure signal works to switch between autonimous and manual mode
13) work on autonimous mode algarithm

*********************************************/

//include this .c file's header file
#include "Robot.h"
#include "adc.h"
#include <avr/interrupt.h>
#include <avr/io.h>
#include "hd44780.h"
#include <stdbool.h>
#include <stdlib.h>
#include <util/delay.h>
#include <stdio.h>

//static function prototypes, functions only called in this file
#define DEBUG 0
//file scope variables
static char serial_string[200] = {0};
//static char serial_string2[200] = {0};
volatile int16_t rc = 0;
volatile int16_t fc = 0;  
volatile int ServoLR = 1450;
volatile int joystickLX = 0;

volatile uint32_t now1 = 0;
volatile uint32_t now2 = 0;
volatile int LR = 1450;
static bool automation = 0;

static int16_t Voltage = 0;

//static function prototypes, functions only called in this file
/********************************************
 ********************************************/
void send_data(int voltage, int RangeL, int RangeF, int RangeR){
//sending section
    uint8_t sendDataByte1, sendDataByte2, sendDataByte3, sendDataByte4;       // data bytes sent      // data bytes received
    uint32_t current_ms=0, last_send_ms=0;          // used for timing the serial send
    
    current_ms = milliseconds_now();
    
    if(current_ms-last_send_ms >= 100) //sending rate controlled here one message every 100ms (10Hz)
    {   
        // this is just incrementing variables to send for testing purposes
        // you will put the code here that puts the message you want to send into sendDataByte1 and sendDataByte2
        sendDataByte1 = RangeL;
        if (sendDataByte1>253)
            sendDataByte1 = 253;

        sendDataByte2 = RangeF;
        if (sendDataByte2>253)
            sendDataByte2 = 253;

        sendDataByte3 = RangeR;
        if (sendDataByte3>253)
            sendDataByte3 = 253;

        sendDataByte4 = voltage;
        if (sendDataByte4>253)
            sendDataByte4 = 253;
        

        // you can add additional bytes to send in the message, 
        //but make sure the receiving code is expecting the right number of bytes
        
        last_send_ms = current_ms;
        serial2_write_byte(0xFF);       //send start byte = 255
        serial2_write_byte(sendDataByte1);  //send first data byte: must be scaled to the range 0-253
        serial2_write_byte(sendDataByte2);  //send second parameter: must be scaled to the range 0-253
        serial2_write_byte(sendDataByte3);
        serial2_write_byte(sendDataByte4);	
        serial2_write_byte(0xFE);       //send stop byte = 254
    }



}


/********************************************
 ********************************************/

//using volitile
void receive_data(){
  static char serial_string[200] = {0};
  static uint8_t recvDataByte1=0, recvDataByte2=0, recvDataByte3=0, recvDataByte4=0;         // data bytes received
  static uint8_t serial_byte_in=0, serial_fsm_state=0;   // used in the serial receive section


    //receiving section
   
        serial_byte_in = UDR2; //move serial byte into variable
        
        switch(serial_fsm_state) //switch by the current state
        {
            case 0:
            //do nothing, if check after switch case will find start byte and set serial_fsm_state to 1
            break;
            case 1: //waiting for first parameter
                recvDataByte1 = serial_byte_in;
                serial_fsm_state++;
            break;
            case 2: //waiting for second parameter
                recvDataByte2 = serial_byte_in;
                serial_fsm_state++;
            break;
            case 3: //waiting for third parameter
                recvDataByte3 = serial_byte_in;
                serial_fsm_state++;
            break;

            case 4: //waiting for fourth parameter
                recvDataByte4 = serial_byte_in;
                serial_fsm_state++;
            break;

            case 5: //waiting for stop byte
                if(serial_byte_in == 0xFE) //stop byte
                {
                    // now that the stop byte has been received, we can process the whole message
                    // the code in this section will implement the result of your message
                    sprintf(serial_string, "received: 1:%4d, 2:%4d, 3:%4d, 4:%4d \n", recvDataByte1, recvDataByte2,recvDataByte3,recvDataByte4, joystickLX,ServoLR,Voltage);
                    serial0_print_string(serial_string);  // print the received bytes to the USB serial to make sure the right messages are received                
                } 
                // if the stop byte is not received, there is an error, so no commands are implemented
                serial_fsm_state = 0; //do nothing next time except check for start byte (below)
            break;
        }
        if(serial_byte_in == 0xFF) //if start byte is received, we go back to expecting the first data byte
        {
            serial_fsm_state=1;
        }
/*
        if(DEBUG){
            //manualy set values
        fc += 5;
        if (fc>210){ 
          fc = 0;
        }
        rc += 2;
        if (rc>210){ 
          rc = 0;
        }
        joystickLX += 5;//recvDataByte4;
        if (joystickLX>230){ 
          joystickLX = 0;
        }
        automation = 0; 
        }
        else{*/
        fc = 256 - recvDataByte1;
        rc = recvDataByte2;
        joystickLX = recvDataByte3;
        automation = recvDataByte4;  
        //}
        
}   

/********************************************
 ********************************************/
void motor_control(uint16_t fc, uint16_t rc){
 int16_t lm = 0;
 int16_t rm = 0; 
  lm = (fc-126) + (rc-126);
  rm = (fc-126) - (rc-126);
  OCR1A = (int32_t)abs(lm)*2500/126; //lm speed from magnitude of lm
  OCR1B = (int32_t)abs(rm)*2500/126; //lm speed from magnitude of rm

  if(lm>=0) //if lm is positive
  {
  //set direction forwards
  PORTA |= (1<<PA1);
  PORTA &= ~(1<<PA0);
  }
  else
  {
  //set direction reverse
  PORTA &= ~(1<<PA1);
  PORTA |= (1<<PA0);
  }
  if(rm>=0) //if rm is positive
  {
  //set direction forwards
  PORTA |= (1<<PA3);
  PORTA &= ~(1<<PA2);
  }
  else
  {
  //set direction reverse
  PORTA &= ~(1<<PA3);
  PORTA |= (1<<PA2);
  }
}


/********************************************

uint32_t get_range(void){
  uint32_t range_front, range_right, range_left;
  range_front = adc_read(0);
  range_right = adc_read(1);
  range_left = adc_read(2);
}
 ********************************************/



void servo_control(){

  if ((joystickLX > 130) && (ServoLR != 700))  // clockwise
  {
    ServoLR = ServoLR - 20;
  }
  if ((joystickLX < 110) && (ServoLR != 2300)) // anticlockwise
  {
    ServoLR = ServoLR + 20;
  }

  if ((ServoLR > 700) && (ServoLR < 2300))
  {
    OCR3A = ServoLR;
  }
}

//autonomous mode pathfinding
void autonomous_mode(int RangeL, int RangeF, int RangeR){
// drive down hallway
//steer away from wall
//right turn
//left turn
// 180 turn
//servo pan
//static int prevRangeL;
//static int prevRangeF;
//static int prevRangeR;
    // Threshold values to determine if an obstacle is near
    int obstacleThreshold = 90; // object distance 10cm
    //reset motor speed
    fc = 123;
    rc = 123;
  // Obstacle ahead, decide to turn left or right
    if (RangeF > obstacleThreshold) {
        
        fc=123;
        joystickLX = 123;
        ServoLR = 700;
        while(ServoLR <= 2300){
          servo_control();
          ServoLR += 10;
        }
        if (RangeL < RangeR) {
            // More space on the left, turn left
            rc = 123 - 50 ; // Left turn
        } else {
            // More space on the right, turn right
            rc =  123 + 50; // Right turn
        }
    } else {
        // No obstacle ahead, move forward
        fc = 150; // Move forward
    }

    // Adjust to keep following the wall
    if (RangeL < obstacleThreshold) {
        // Too close to left wall, turn right slightly
        rc -= 20;
    } else if (RangeR < obstacleThreshold) {
        // Too close to right wall, turn left slightly
        rc += 20;
    }
}






int main(void)
{
    // initialisation
    serial0_init();     // terminal communication with PC
    serial2_init();     // microcontroller communication to/from another Arduino
    UCSR2B |= (1 << RXCIE2); // Enable the USART Receive Complete interrupt (USART_RXC) 
                // or loopback communication to same Arduino
    adc_init();
    
    milliseconds_init();
        cli();
        DDRA |= (1<<DDA0)|(1<<DDA1)|(1<<DDA2)|(1<<DDA3); //put A0-A3 into low impedance output mode
        DDRB = 255;
        TCCR1A = 0;
        TCCR1B = 0;
        TCCR1A |= (1<<COM1B1)|(1<<COM1A1);
        TCCR1B |= (1<<CS11)|(1<<WGM13); 
        ICR1 = 2500;   
        //OCR1A = 1200;   
      
        DDRE = 255;
        TCCR3A = 0;
        TCCR3B = 0;
        TCCR3A |= (1<<COM3A1);
        TCCR3B |= (1<<CS31)|(1<<WGM33); //cs12
        ICR3 = 20000;    //625
       
        
          
        DDRD = 0;
        DDRD &= ~(1<<PD0);
        PORTD |= (1<<PD0);
        EICRA |= (1<<ISC01);
        EICRA &= ~(1<<ISC00);
        EIMSK |= (1<<INT0);
      sei();
    
    while(1)
    {
        Voltage = adc_read(3) * 9.77517;// adc_read(3)* (5.00 / 1023.00) * 2;

        volatile int RangeL = adc_read(0)/4;
		    volatile int RangeF = adc_read(1)/4;
		    volatile int RangeR = adc_read(2)/4;
        float distanceL = RangeL/615*1024;
        float distanceF = RangeF/615*1024;
        float distanceR = RangeR/615*1024;

        sprintf(serial_string, "received: Left:%4d, Forward:%4d, Right:%4d, m_voltage: %4d  \n", RangeL,RangeF,RangeR, Voltage);
       // serial0_print_string(serial_string);
        //send_data(Voltage, RangeL, RangeF, RangeR);
		
    
    if (DEBUG ==1 ){
            //receive_data(&fc, &rc, &joystickLX, &automation);
            receive_data();
            sprintf(serial_string, "fc: %4d, rc:%4d, JLX:%4d, Automation:%4d,  \n", fc, rc, joystickLX, automation);
            serial0_print_string(serial_string);
            _delay_ms(200);
           // fc = 200;
            //rc = 123;
            sprintf(serial_string, "fc: %4d, rc:%4d, JLX:%4d, Automation:%4d,  \n", fc, rc, joystickLX, automation);
            //serial0_print_string(serial_string);
            //motor_control(fc,rc);
            servo_control();
        }
      else{
        /*
        if(UCSR2A&(1<<RXC2)){ //if new serial byte has arrived: refer to page 238 of datasheet. Single bit flag indicates a new byte is available
            //receive_data();
            sprintf(serial_string, "fc: %4d, rc:%4d, JLX:%4d, Automation:%4d,  \n", fc, rc, joystickLX, automation);
            serial0_print_string(serial_string);
            }*/
       /*
        if (automation){
            autonomous_mode(distanceL, distanceF, distanceR);
            motor_control(fc, rc);
        }*/
        
        servo_control();
        motor_control(fc,rc);

        
        
        }

    }
    return(1);
} //end main
ISR(TIMER3_CAPT_vect)
{
}

ISR(INT0_vect)
{
/*now1 = milliseconds_now();
if(now1-now2 >= 100)            //250
   {
    ServoLR = 1450;
    now2 = now1;
    OCR3A = ServoLR;
    _delay_ms(500);
   }*/
}
ISR(USART2_RX_vect)
{
    receive_data();
}
