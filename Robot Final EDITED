#include "Robot.h"
#include "adc.h"
#include <avr/interrupt.h>
#include <avr/io.h>
#include "hd44780.h"
#include <stdbool.h>
#include <stdlib.h>
#include <util/delay.h>
#include <stdio.h>
#define DEBUG 0

//file scope variables
static char serial_string[200] = {0};
volatile int16_t rc = 123, fc = 123;
static int16_t Voltage = 0;
volatile int ServoLR = 1450, joystickLX = 0;
volatile uint32_t now1 = 0, now2 = 0;
static bool automation = 0;
volatile int AveL, AveF, AveR, RangeL, RangeF, RangeR;
volatile int next_action = 0, last_action = 0, turning = 0;



//static function prototypes, functions only called in this file
/********************************************
send data via serial2
    correct data to be within 0-253
 ********************************************/
void send_data(int voltage, int RangeL, int RangeF, int RangeR){
//sending section
  uint8_t sendDataByte1=0, sendDataByte2=0, sendDataByte3=0, sendDataByte4=0, sendDataByte5=0;       // data bytes sent      // data bytes received
  uint32_t current_ms=0, last_send_ms=0;          // used for timing the serial send
  
  current_ms = milliseconds_now();
  
  if(current_ms-last_send_ms >= 100) //sending rate controlled here one message every 100ms (10Hz)
  {   
      // this is just incrementing variables to send for testing purposes
      // you will put the code here that puts the message you want to send into sendDataByte1 and sendDataByte2
      sendDataByte1 = (RangeL/10);
      if (sendDataByte1>253)
          {sendDataByte1 = 253;}

      sendDataByte2 =(RangeF/10);
      if (sendDataByte2>253)
          {sendDataByte2 = 253;}

      sendDataByte3 = (RangeR/10);
      if (sendDataByte3>253)
         {sendDataByte3 = 253;}

      sendDataByte4 = voltage;
      if (sendDataByte4>253)
          {sendDataByte4 = 253;}
      

      // you can add additional bytes to send in the message, 
      //but make sure the receiving code is expecting the right number of bytes
      sprintf(serial_string, "sent: 1:%4d, 2:%4d, 3:%4d, 4:%4d \n", sendDataByte1, sendDataByte2, sendDataByte3, sendDataByte4);
      serial0_print_string(serial_string);  // print the sent bytes to the USB serial to make sure the right messages are sent
      last_send_ms = current_ms;
      serial2_write_byte(0xFF);       //send start byte = 255
      serial2_write_byte(sendDataByte1);  
      serial2_write_byte(sendDataByte2);  
      serial2_write_byte(sendDataByte3);
      serial2_write_byte(sendDataByte4);
      serial2_write_byte(sendDataByte5);
      serial2_write_byte(0xFE);       //send stop byte = 254
  }



}


/********************************************
receive data via serial2
    receive data from serial2
    parse receved data into variables
 ********************************************/
//using volitile
void receive_data(void){
  static char serial_string[200] = {0};
  static uint8_t recvDataByte1=0, recvDataByte2=0, recvDataByte3=0, recvDataByte4=0,recvDataByte5=0;         // data bytes received
  static uint8_t serial_byte_in=0, serial_fsm_state=0;   // used in the serial receive section


    //receiving section
   
        serial_byte_in = UDR2; //move serial byte into variable
        
        switch(serial_fsm_state) //switch by the current state
        {
            case 0:
            //do nothing, if check after switch case will find start byte and set serial_fsm_state to 1
            break;
            case 1: //waiting for first parameter
                recvDataByte1 = serial_byte_in;
                serial_fsm_state++;
            break;
            case 2: //waiting for second parameter
                recvDataByte2 = serial_byte_in;
                serial_fsm_state++;
            break;
            case 3: //waiting for third parameter
                recvDataByte3 = serial_byte_in;
                serial_fsm_state++;
            break;

            case 4: //waiting for fourth parameter
                recvDataByte4 = serial_byte_in;
                serial_fsm_state++;
            break;
            case 5: //waiting for fourth parameter
                recvDataByte5 = serial_byte_in;
                serial_fsm_state++;
            break;
            case 6: //waiting for stop byte
                if(serial_byte_in == 0xFE) //stop byte
                {
                    // now that the stop byte has been received, we can process the whole message
                    // the code in this section will implement the result of your message
                    sprintf(serial_string, "\nreceived: 1:%4d, 2:%4d, 3:%4d, 4:%4d \n", recvDataByte1, recvDataByte2, recvDataByte3, recvDataByte4);
                    serial0_print_string(serial_string);  // print the received bytes to the USB serial to make sure the right messages are received                
                } 
                // if the stop byte is not received, there is an error, so no commands are implemented
                serial_fsm_state = 0; //do nothing next time except check for start byte (below)
            break;
        }
        if(serial_byte_in == 0xFF) //if start byte is received, we go back to expecting the first data byte
        {
            serial_fsm_state=1;
        }

        //parse receved data into variables
        fc = 256 - recvDataByte1;
        rc = recvDataByte2;
        joystickLX = recvDataByte3;
        automation = recvDataByte4;  
        
        
}   

/********************************************
motor control
    change values from forward/sideways to left/right motor control
    set duty cycle of PWM for motors
    set direction of motors
 ********************************************/
void motor_control(uint16_t fc, uint16_t rc){
 int16_t lm = 0;
 int16_t rm = 0; 
  lm = (fc-126) + (rc-126);
  rm = (fc-126) - (rc-126);
  OCR1A = (int32_t)abs(lm)*2500/126; //lm speed from magnitude of lm
  OCR1B = (int32_t)abs(rm)*2500/126; //lm speed from magnitude of rm

  if(lm>=0) //if lm is positive
  {
  //set direction forwards
  PORTA |= (1<<PA1);
  PORTA &= ~(1<<PA0);
  }
  else
  {
  //set direction reverse
  PORTA &= ~(1<<PA1);
  PORTA |= (1<<PA0);
  }
  if(rm>=0) //if rm is positive
  {
  //set direction forwards
  PORTA |= (1<<PA3);
  PORTA &= ~(1<<PA2);
  }
  else
  {
  //set direction reverse
  PORTA &= ~(1<<PA3);
  PORTA |= (1<<PA2);
  }
}


/******************************************** 
 reads adc values 
    average 5 readings for accuracy
    calculates distance in mm for range sensors
    calculates voltage supply
 ********************************************/
void read_adc(void){
    int i;
    
    AveL = adc_read(0)/0.2048;
    AveL = ((1000000/AveL-4)*0.34 -56.6);
    for(i = 0; i < 5; i++)
    {
        RangeL = adc_read(0)/0.2048;
        RangeL = ((1000000/RangeL)*0.31 -40.6)-4; //gives distance in mm
        if (RangeL > 800){RangeL = 800;}
        AveL = (AveL + RangeL)/2 ;
    }
    RangeL = AveL;
   

    AveF = adc_read(1)/0.2048;
    AveF = ((1000000/AveF-4)*0.34 -56.6);
    for(i = 0; i < 5; i++)
    {
        RangeF = adc_read(1)/0.2048;
        RangeF = ((1000000/RangeF)*0.34 -56.6)-4; //gives distance in mm
        if (RangeF > 800){RangeF = 800;}
        //RangeF = ((1000000/RangeF-4)*0.34 -56.6);
        AveF = (AveF + RangeF)/2 ;
    }
    RangeF = AveF;
   


    AveR = adc_read(2)/0.2048;
    AveR = ((1000000/AveR-4)*0.34 -56.6);
    for(i = 0; i < 5; i++)
    {
        RangeR = adc_read(2)/0.2048;
        RangeR = ((1000000/RangeR)*0.31 -40.6)-4; //gives distance in mm
        if (RangeR > 800){RangeR = 800;} //corect down for anomolous readings
        AveR = (AveR + RangeR)/2 ;
    }
    RangeR = AveR;
    
      Voltage = adc_read(3) * 0.0977517;// adc_read(3)* (5.00 / 1023.00) * 2;

}


/********************************************
servo control
    move servo position based on joystick input
    limit servo movement to prevent damage
 ********************************************/
void servo_control(void){

  if ((joystickLX > 130) && (ServoLR != 700))  // if joystick pushed right
 
  {
    ServoLR -= 50; // clockwise
  }
  if ((joystickLX < 110) && (ServoLR != 2300)) // if joystick pushed Left
  {
    ServoLR += 50;// anticlockwise
  }
    //limit servo movement
  if (ServoLR < 700){ ServoLR = 700;}
  if (ServoLR > 2300){ServoLR = 2300;}

  OCR3A = ServoLR; // set servo position
}



#define Stop 0
#define Forward 1
#define Backwards 2
#define RightTurn 3
#define LeftTurn 4
#define AdjustRight 5
#define AdjustLeft 6
#define PanCamera 7

//autonomous mode pathfinding
void autonomous_mode(int RangeL, int RangeF, int RangeR){

// Threshold values to determine if an obstacle is near
int obstacleThresholdFront = 150, obstacleThresholdSides=90; //mm

// descision tree for pathfinding
if (next_action != PanCamera){ // pan camera first
    //no objects in any direction --> dont move
    if (RangeF >=800 && RangeL >=700 && RangeR >=700){next_action = Stop;}

    //no obsticle in front and not currently turning --> move forward
    if (RangeF > obstacleThresholdFront && (turning != 1)){
        //if continuing to drive forward and wall on both sides --> adjust to keep away from walls
        if (last_action == Forward && RangeL < 2 * obstacleThresholdSides && RangeR < 2 * obstacleThresholdSides){ 
            if (RangeL < RangeR){next_action = AdjustRight;} // more space or right --> adjust right
            else if (RangeL > RangeR){next_action = AdjustLeft;} // more space on left --> adjust left
    }
    else {next_action = Forward;} // equal space on both sides --> drive forward
    }

    //object ahead --> stop 
    //             --> choose direction to turn
    if (RangeF < obstacleThresholdFront ){ // object encountered ahead

        if (last_action == Forward || last_action == AdjustLeft || last_action == AdjustRight){next_action = Stop;} // stop to avoid collision
        // choose direction to turn
        else if (last_action == Stop){ 
            if (RangeL < RangeR){// more space or right --> turn right
                next_action = RightTurn;
                turning = 1;
                } 
            else if (RangeL > RangeR){ // more space on left --> turn left
                next_action = LeftTurn;
                turning = 1;
                } 
            //else {next_action = Backwards;} // equal space on both sides --> drive backwards
        }
    }
    //wall on left --> turn right
    else if (RangeL < obstacleThresholdSides && last_action != RightTurn ){ next_action = RightTurn ;}
    //wall on right --> turn left
    else if (RangeR < obstacleThresholdSides && last_action != LeftTurn ){ next_action = LeftTurn;}
        
    //if turning left keep turning untill no object in front --> stop turning
    if (turning){
        if ( RangeF > 200){next_action = Stop; turning = 0;}//once no object in front stop turning
        else{
        if (last_action == LeftTurn ){next_action = LeftTurn;}//if turning left keep turning untill no object in front
        else if (last_action == RightTurn){next_action = RightTurn;}//if turning right keep turning untill no object in front
        }
    }
}


// execute action action
switch (next_action){
    case Stop:
    //Stop
    fc = 123;
    rc = 123;
    last_action = Stop;
    serial0_print_string("Stop \n");
    break; 

    case Forward:
    //drive forward
    fc = 123 + 80;
    rc = 123;
    last_action = Forward;
    serial0_print_string("Forward\n");
    break; 

    case Backwards:
    //follow right wall
    fc = 123 - 100;
    rc = 123;
    last_action = Backwards;
    serial0_print_string("FollowRightWall\n");
    break;

    case RightTurn: 
    //right turn
    fc = 123;
    rc = 123 + 100;
    last_action = RightTurn;
    serial0_print_string("RightTurn\n");
    break;

    case LeftTurn:
    //left turn
    fc = 123;  
    rc = 123 -100;
    last_action = LeftTurn;
    
    serial0_print_string("LeftTurn\n");
    break;

    case AdjustRight://adjust away from left wall
    rc += 50;

        if (rc > 220) { rc = 220;}
        last_action = AdjustRight;
        serial0_print_string("AdjustRight\n");
    break;

    case AdjustLeft:
    //adjust away from right wall
    rc -= 50 ;
    // fc = 123;
        if (rc < 30) {rc = 30;}
        //last_action = Forward;
        last_action = AdjustLeft;
        //turningL = 1;
        serial0_print_string("AdjustLeft\n");
    break;

    case PanCamera: 
   //stop the car
    ServoLR = 700;
    fc = 123;
    rc = 123;   
    motor_control(fc,rc); 
      //pan the camera
    while(ServoLR < 2200){ 
        joystickLX = 10;
        servo_control();
        _delay_ms(200);
    }
    //reset camera forward
    ServoLR = 1450; 
    OCR3A = ServoLR;
    //last_action = PanCamera;
    last_action = Stop;
    next_action = Stop;
    serial0_print_string("PanCamera");
    break;
    }
}




int main(void)
{
// initialisation
serial0_init();     // terminal communication with PC
serial2_init();     // microcontroller communication to/from another Arduino
UCSR2B |= (1 << RXCIE2); // Enable the USART Receive Complete interrupt (USART_RXC) 
        // or loopback communication to same Arduino
adc_init();

milliseconds_init();

cli();                                // Disable interrupts globally
DDRA |= (1<<DDA0)|(1<<DDA1)|(1<<DDA2)|(1<<DDA3); // Set pins A0 to A3 as output
DDRB = 255;                           // Set all pins on port B as outputs
TCCR1A = 0;                           // Clear timer 1 control regester A
TCCR1B = 0;                           // Clear timer 1 control register B
TCCR1A |= (1<<COM1B1)|(1<<COM1A1);    // Set OC1A and OC1B to non-inverting mode
TCCR1B |= (1<<CS11)|(1<<WGM13);       // set prescalor to 8 and enable phase and frequency correct pwm mode
ICR1 = 2500;                          // Set top value for timer 1 to 2500 

DDRE = 255;                           // Set all pins on port E to ouput
TCCR3A = 0;                           // Clear timer 3 control regester A
TCCR3A |= (1<<COM3A1);                // Set OC3A to non-inverting mode
TCCR3A |= (1<<CS31)|(1<<WGM33);       // Set prescalor to 8 and enabel phase and frequency correct pwm mode
ICR3 = 20000;                         // Set to value to 20000
sei();                                // Enable interupts globally


ServoLR = 1450;
while(1)
{
    read_adc();
    
    //sprintf(serial_string, "received: L:%4d, F:%4d, R:%4d, m_voltage: %4d  \n", RangeL, RangeF, RangeR, Voltage);
    //serial0_print_string(serial_string);
    send_data(Voltage, RangeL, RangeF, RangeR);

    if (DEBUG ==1){
        autonomous_mode(RangeL, RangeF, RangeR);
        //sprintf(serial_string, "fc: %4d, rc:%4d, JLX:%4d, Automation:%4d,  \n", fc, rc, joystickLX, automation);
        //serial0_print_string(serial_string);
        //joystickLX = 100;
        //OCR3A = ServoLR;
        // _delay_ms(100);
        // fc = 200;
        //rc = 123;
        sprintf(serial_string, "fc: %4d, rc:%4d,  \n", fc, rc);
        serial0_print_string(serial_string);
        motor_control(fc,rc);
        // servo_control();
        //sprintf(serial_string, "Range:  L: %d, F: %d, R: %d, \n ave Range:  L: %d, F: %d, R: %d \n Next: %d, Last: %d, Turning: %4d, Target: %4d \n", RangeL, RangeF, RangeR, AveL, AveF, AveR, next_action, last_action, turning, target);
        //serial0_print_string(serial_string);

        _delay_ms(1);
    } 
    else{
        send_data(Voltage, RangeL, RangeF, RangeR);
        if (automation){
            autonomous_mode(RangeL, RangeF, RangeR);
        }
        else{
            next_action = PanCamera; //pan camera next time autonomous mode is on
            servo_control();
        }
        motor_control(fc, rc);
        _delay_ms(10);// allow time for robot to execute action
    }
}
return(1);} //end main

ISR(USART2_RX_vect)
{
    receive_data();
}
